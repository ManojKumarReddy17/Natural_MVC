@model Natural.Core.Models.DistributorSalesReport

@{
    ViewData["Title"] = "Displayreports";
    string defaultStateId = "stn1";
    string defaultCityId = "ctn84179";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <br />
    <h3>DSR</h3>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <!-- CSS -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" rel="stylesheet">

    <!-- JavaScript -->
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="~/js/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>


        // Print function
        function printContent(content) {
            var StateName = $('#state option:selected').text();
            var CityName = $('#city option:selected').text();
            var AreaName = $('#area option:selected').text();
            var ExecutiveName = $('#executive option:selected').text();
            var DistributorName = $('#distributor option:selected').text();
            var RetailorName = $('#retailor option:selected').text();

            var header = '<div><b>State:</b> ' + StateName + '</div>' +
                '<div><b>City:</b> ' + CityName + '</div>' +
                '<div><b>Area:</b> ' + AreaName + '</div>' +
                '<div><b>Executive:</b> ' + ExecutiveName + '</div>' +
                '<div><b>Distributor:</b> ' + DistributorName + '</div>' +
                '<div><b>Retailor:</b> ' + RetailorName + '</div><br>';


            var totalQuantity = 0;
            // var totalPrice = 0;
            var totalSaleAmount = 0;

            // Loop through each row in the table
            $(content).find('tr').each(function () {
                // Get quantity, price, and sale amount from each row
                var quantity = parseFloat($(this).find('td:eq(1)').text()) || 0;
                // var price = parseFloat($(this).find('td:eq(2)').text()) || 0;
                var saleAmount = parseFloat($(this).find('td:eq(3)').text()) || 0;

                // Add to totals
                totalQuantity += quantity;
                // totalPrice += price;
                totalSaleAmount += saleAmount;
            });

            var footer = '<div style="text-align:right;"><b>Total Quantity:</b> ' + totalQuantity.toFixed(2) + '</div>' +
                // '<div style="text-align:right;"><b>Total Price:</b> ' + totalPrice.toFixed(2) + '</div>' +
                '<div style="text-align:right;"><b>Total Sale Amount:</b> ' + totalSaleAmount.toFixed(2) + '</div><br>';

            var printableContent = header + content + footer;

            var originalContent = $('body').html();
            $('body').html(printableContent);
            window.print();
            $('body').html(originalContent);
        }

        // Function to initiate printing
        $(document).ready(function () {
            $('#printBtn').click(function () {
                var content = $('.result-container').html();
                printContent(content);
            });
        });





        $(document).ready(function () {
            // Trigger state and city change
            statechange();
            citychange();
        });

      
        function statechange() {
            var defaultStateId = '@defaultStateId';
            var defaultCityId = '@defaultCityId';
            var stid = $('#state').val() == null ? defaultStateId : $('#state').val();
            var ddlcity = $('#city');

            // Disable all dependent dropdowns initially
            ddlcity.prop('disabled', true).empty();
            $('#area').prop('disabled', true).empty();
            // $('#areaInput').prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (stid.trim() != '') {
                $.ajax({
                    url: '/Executive/GetCitiesByStateId',
                    type: 'GET',
                    dataType: 'json',
                    data: { stateId: stid },
                    success: function (d) {
                        ddlcity.append($("<option></option>").val('').html('--Select City--'));
                        $.each(d, function (i, city) {
                            ddlcity.append($("<option></option>").val(city.id).html(city.cityName));
                        });

                        // If default state is selected, also set the default city
                        if (stid == defaultStateId) {
                            ddlcity.val(defaultCityId).change(); // Trigger change to populate areas
                        }

                        ddlcity.prop('disabled', false); // Enable the city dropdown
                    },
                    error: function () {
                        alert('Error fetching cities!');
                    }
                });
            }
        }

        function citychange() {
            var defaultCityId = '@defaultCityId';
            var cityid = $('#city').val() == null ? defaultCityId : $('#city').val();
            var ddlarea = $('#area');

            // Disable all dependent dropdowns initially
            ddlarea.prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (cityid.trim() != '') {
                $.ajax({
                    url: "/Executive/GetAreasByCityId",
                    type: 'GET',
                    dataType: 'json',
                    data: { cityId: cityid },
                    success: function (d) {
                        ddlarea.append($("<option></option>").val('').html('--Select Area--'));
                        $.each(d.items, function (i, area) {
                            ddlarea.append($("<option></option>").val(area.id).html(area.areaName));
                        });

                        ddlarea.prop('disabled', false); // Enable the area dropdown
                    },
                    error: function () {
                        alert('Error fetching areas!');
                    }
                });
            }
            // else {
            //     $('#executive').empty().append($("<option></option>").val('').html('--Select executive--')).prop('disabled', true);
            //     $('#distributor').empty().append($("<option></option>").val('').html('--Select distributor--')).prop('disabled', true);
            //     $('#retailor').empty().append($("<option></option>").val('').html('--Select retailor--')).prop('disabled', true);

            // }      
            }

       

        function areachange() {
            var areaId = $('#area').val();
            if (areaId.trim() != '') {
                var ddlExecutive = $('#executive');
                // ddlExecutive.empty();
                // $("distributor").empty();
                // $("retialor").empty();
                // Disable all dependent dropdowns initially
                ddlExecutive.prop('disabled', true).empty();
                $('#distributor').prop('disabled', true).empty();
                $('#retailor').prop('disabled', true).empty();
                $.ajax({
                    url: "/DailySaleReports/GetAExecutiveByArea",
                    type: 'GET',
                    dataType: 'json',
                    data: { areaId: areaId },
                    success: function (d) {
                        ddlExecutive.append($("<option></option>").val(''));
                        $.each(d, function (i, executive) {
                            ddlExecutive.append($("<option>" + executive.executive + "</option>").val(executive.id).html(executive.name));
                        });

                        ddlExecutive.prop('disabled', false); // Enable the executive dropdown
                        var selectedAreaName = $('#area option:selected').text();
                        $('#areaInput').val(selectedAreaName);
                    },
                    error: function (error) {
                        alert('Error ' + error.message);
                    }
                });
            }
            else {
                $('#executive').empty().append($("<option></option>").val('').html('--Select executive--')).prop('disabled', true);
                $('#distributor').empty().append($("<option></option>").val('').html('--Select distributor--')).prop('disabled', true);
                $('#retailor').empty().append($("<option></option>").val('').html('--Select retailor--')).prop('disabled', true);
            }
        }
        function executivechange() {
            var exid = $('#executive').val();
            var ddldis = $('#distributor');

            // Disable all dependent dropdowns initially
            ddldis.prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (exid.trim() != '') {
                $.ajax({
                    url: "/DailySaleReports/GetDistributorByExecutiveId",
                    type: 'GET',
                    dataType: 'json',
                    data: { executiveId: exid },
                    success: function (d) {
                        ddldis.append($("<option></option>").val('').html('--Select Distributor--'));
                        $.each(d, function (i, distributor) {
                            ddldis.append($("<option></option>").val(distributor.id).html(distributor.distributorName));
                        });

                        ddldis.prop('disabled', false); // Enable the distributor dropdown
                    },
                    error: function () {
                        alert('Error fetching distributors!');
                    }
                });
            }
        }

        function distributorchange() {
            var disid = $('#distributor').val();
            var ddlret = $('#retailor');

            // Disable the retailor dropdown initially
            ddlret.prop('disabled', true).empty();

            if (disid.trim() != '') {
                $.ajax({
                    url: "/DailySaleReports/GetRetailorByDistributorId",
                    type: 'GET',
                    dataType: 'json',
                    data: { distributorId: disid },
                    success: function (d) {
                        ddlret.append($("<option></option>").val('').html('--Select Retailor--'));
                        $.each(d, function (i, retailor) {
                            ddlret.append($("<option></option>").val(retailor.id).html(retailor.retailorName));
                        });

                        ddlret.prop('disabled', false); // Enable the retailor dropdown
                    },
                    error: function () {
                        alert('Error fetching retailors!');
                    }
                });
            }
        }

        
        $(document).ready(function () {
            // Set default values for StartDate and EndDate
            $("#StartDate").val("YYYY-MM-DD");
            $("#EndDate").val("YYYY-MM-DD");
            var currentDate = new Date().toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            $("#currentDate").text(currentDate);
            // Event handler for Save button click
       
            $("#saveButton").click(function () {
                // Clear previous error messages
                $("#StartDateError").text("");
                $("#EndDateError").text("");

                // Show loading indicator
                $("#loadingIndicator").show();

                // Get form values
                var startDate = $("#StartDate").val();
                var endDate = $("#EndDate").val();
                var isValid = true;

                // Validate required fields
                if (!startDate) {
                    $("#StartDateError").text("Start Date is required.");
                    isValid = false;
                }

                if (!endDate) {
                    $("#EndDateError").text("End Date is required.");
                    isValid = false;
                }

                if (!isValid) {
                    $("#loadingIndicator").hide(); // Hide loading indicator
                    return; // Stop the function execution if validation fails
                }

                // Prepare data to send
                var modelData = {
                    State: $("#state").val(),
                    City: $("#city").val(),
                    Area: $("#area").val(),
                    Executive: $("#executive").val(),
                    Distributor: $("#distributor").val(),
                    Retailor: $("#retailor").val(),
                    StartDate: startDate,
                    EndDate: endDate
                };

                // Convert data to JSON string
                var jsonString = JSON.stringify(modelData);

                // AJAX request
                $.ajax({
                    url: "/DailySaleReports/DisplayDsreport",
                    type: "POST",
                    data: jsonString,
                    contentType: "application/json",
                    success: function (response) {
                        $("#Productlist").empty();
                        if (response.length === 0) {
                            $("#Productlist").append('<tr><td colspan="4">No data provided</td></tr>');
                        } else {
                            $("#Productlist").append('<tr style="font-weight:bold">' +
                                '<td>Product Name</td>' +
                                '<td>Quantity</td>' +
                                '<td>ProductType</td>' +
                                '<td>Sale Amount</td>' +
                                '</tr>');
                            $.each(response, function (i, ds) {
                                $("#Productlist").append(
                                    '<tr>' +
                                    '<td>' + ds.product_Name + '</td>' +
                                    '<td>' + ds.quantity + '</td>' +
                                    '<td>' + ds.productType + '</td>' +
                                    '<td>' + ds.saleAmount + '</td>' +
                                    '</tr>'
                                );
                            });
                        }
                    },
                    error: function (request, status, error) {
                        $("#Productlist").empty();
                        $("#Productlist").append('<tr><td colspan="4">No data provided</td></tr>');
                    },
                    complete: function () {
                        // Hide loading indicator when request completes (success or error)
                        $("#loadingIndicator").hide();
                    }
                });
            });
        });


        function autocomplete(inp, select) {
            var currentFocus;
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
                for (i = 0; i < select.length; i++) {
                    if (select.options[i].text.toUpperCase().indexOf(val.toUpperCase()) > -1) {
                        b = document.createElement("DIV");
                        b.innerHTML = "<strong>" + select.options[i].text.substr(0, val.length) + "</strong>";
                        b.innerHTML += select.options[i].text.substr(val.length);
                        b.innerHTML += "<input type='hidden' value='" + select.options[i].value + "'>";
                        b.addEventListener("click", function (e) {
                            inp.value = this.getElementsByTagName("input")[0].value;
                            select.value = inp.value;
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });

            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode == 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode == 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }


            function closeAllLists(elmnt) {
                console.log("Closing dropdown list");
                var x = document.getElementsByClassName("autocomplete-items");
                console.log("Dropdown list elements:", x);
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }


            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        $(document).ready(function () {
            var areaSelect = document.getElementById("area");
            var areaInput = document.getElementById("areaInput");
            autocomplete(areaInput, areaSelect);
        });




 
        function selectArea(value) {
            console.log("Selecting area:", value); // Check if the function is being called with the correct value
            var areaInput = $("#areaInput");
            areaInput.val(value);
            filterAreas(); // Filter the dropdown options

            // Trigger change event on the area dropdown to close it after selection
            $("#area").trigger("change");
        }








    </script>
 
    <style>
        .form-group {
            display: flex;
            justify-content: space-between;
        }

            .form-group b {
                width: 30%;
                box-sizing: border-box;
            }

        table,
        th,
        td {
            border: 1px solid black;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 10px;
            text-align: left;
        }

        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

                .autocomplete-items div:hover {
                    background-color: #e9e9e9;
                }

        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>

    <style>
        .form-group {
            display: flex;
            justify-content: space-between;
        }

            .form-group b {
                width: 30%;
                box-sizing: border-box;
            }

        table,
        th,
        td {
            border: 1px solid black;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 5px;
            text-align: left;
        }
    </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Save Data with Loading Indicator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 1px;
        }

        .container {
            padding: 20px;
        }

        #loadingIndicator {
            display: none;
            position: fixed;
            top: 60%;
            left: 50%;
            background-color: #ddd;
            padding: 20px;
            border: 2px solid #ccc;
            border-radius: 5px;
            z-index: 1000;
            text-align: center;
        }

        #Productlist {
            margin-top: 20px;
            width: 100%;
            border-collapse: collapse;
        }

            #Productlist th, #Productlist td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }

            #Productlist th {
                background-color: #f2f2f2;
            }
    </style>
</head>
<body>
    <div class="form-group" >
        <b>
        

            @Html.LabelFor(model => model.State )
            @Html.DropDownListFor(model => model.State, new SelectList(Model.StateList, "Id", "StateName",defaultStateId),
                     new { @id = "state", onchange = "statechange()", @class = "form-select", required = "required" })


        </b>
        <b>
            @Html.LabelFor(model => model.City)
            @Html.DropDownListFor(model => model.City, new SelectList(new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value ="" },
            }, "Value", "Text"), new { @id = "city", @onchange = "citychange()", @class = "form-select", required = "required" })


        </b>

        <div>
            <b>
                @Html.LabelFor(model => model.Area)
                <input type="text" id="areaInput" oninput="filterAreas()" placeholder="Search for Area">
            </b>
            <div id="areaPopup" class="popup">
                @Html.DropDownListFor(model => model.Area, new List<SelectListItem>
                {
                new SelectListItem {Text = "", Value = ""}
                // Add other SelectListItem items dynamically if needed
                }, new { @id = "area", @onchange = "areachange()", @class = "form-select", style = "flex-grow: 1; max-height: 100px; overflow-y: auto;", required = "required" })
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var stateDropdown = document.getElementById("state");
                var cityDropdown = document.getElementById("city");
                var areaDropdown = document.getElementById("area");
                var executiveDropdown = document.getElementById("executive");
                var distributorDropdown = document.getElementById("distributor");
                var retailorDropdown = document.getElementById("retailor");

                // Function to reset other dropdowns and close popup
                function resetOtherDropdowns() {
                    cityDropdown.value = "";
                    areaDropdown.value = "";
                    areaInput.value = "";
                    document.getElementById("areaPopup").style.display = "";
                    executiveDropdown.value = "";
                    distributorDropdown.value = "";
                    retailorDropdown.value = "";
                }

                // State dropdown change event
                stateDropdown.addEventListener("change", function () {
                    resetOtherDropdowns();
                });

                // Area dropdown change event
                areaDropdown.addEventListener("change", function () {
                    var selectedOption = areaDropdown.options[areaDropdown.selectedIndex];
                    if (selectedOption.value !== "") {
                        document.getElementById("areaInput").value = selectedOption.textContent.trim();
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Area input click event to show popup
                document.getElementById("areaInput").addEventListener("click", function () {
                    document.getElementById("areaPopup").style.display = "block";
                });

                // Close area popup when clicking outside
                document.addEventListener("click", function (e) {
                    if (!document.getElementById("areaInput").contains(e.target) && !areaDropdown.contains(e.target)) {
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Function to filter area options based on input
                function filterAreas() {
                    var input = document.getElementById("areaInput");
                    var filter = input.value.toUpperCase();
                    var options = areaDropdown.getElementsByTagName("option");

                    for (var i = 0; i < options.length; i++) {
                        var txtValue = options[i].textContent || options[i].innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            options[i].style.display = "";
                        } else {
                            options[i].style.display = "none";
                        }
                    }

                    areaDropdown.size = options.length;
                }

                // Area input keyup event for filtering
                document.getElementById("areaInput").addEventListener("keyup", function () {
                    filterAreas();
                });
            });
        </script>


        <b>
            @Html.LabelFor(model => model.Executive)
            @Html.DropDownListFor(model => model.Executive, new List<SelectListItem>
            {
            new SelectListItem { Text = "--Select executive--", Value = "" }
            }, new { @id = "executive", @onchange = "executivechange()", @class = "form-select", required = "required" })

        </b>

        <b>
            @Html.LabelFor(model => model.Distributor)
            @Html.DropDownListFor(model => model.Distributor, new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value = "" }
            }, new { @id = "distributor", onchange = "distributorchange()", @class = "form-select", required = "required" })
            @*@Html.ValidationMessageFor(model => model.Distributor, "", new { @class = "text-danger" })*@
        </b>
        <b>
            @Html.LabelFor(model => model.Retailor)
            @Html.DropDownListFor(model => model.Retailor, new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value = "" }
            }, new { @id = "retailor", @class = "form-select", required = "required" })
            @*@Html.ValidationMessageFor(model => model.Retailor, "", new { @class = "text-danger" })*@
        </b>
        
         <div id="loadingIndicator" style="display: none;">Loading data...</div> 
        <b>

            @Html.LabelFor(model => model.StartDate)
            <input type="date" id="StartDate" name="StartDate" class="datepicker" style="padding: 8px;" required>
            <div id="StartDateError" class="error-message" style="color: red;"></div>
            @Html.LabelFor(model => model.EndDate)
            <input type="date" id="EndDate" name="EndDate" class="datepicker" style="padding: 8px;" required>
            <div id="EndDateError" class="error-message" style="color: red;"></div>
        </b>
        <div class="col-md-2">
            <div class="form-group">
                <button type="button" id="saveButton" class="btn btn-secondary my-4" onclick="Save()">
                    <i class="material-icons" style="font-size:15px;display:flex;justify-content:center;align-items:center;">search</i>
                </button>
                <button class="btn btn-secondary my-4" id="printBtn">
                    <i class="material-icons" style="font-size:15px;display:flex;justify-content:center;align-items:center;">print</i> Print
                </button>
            </div>
        </div>
    </div>

    <!-- Add other inputs as needed -->







    <div class="result-container" style="overflow-y: auto; max-height: 200px;">
        <table class="table" id="Productlist">
            <thead>
                <tr>
                    <th colspan="4">Daily Sales Report - <span id="currentDate"></span></th>
                </tr>
                <tr>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Product Type</th>
                    <th>Sale Amount</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.report != null)
                {
                    foreach (var item in Model.report)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Product_Name)</td>
                            <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                            <td>@Html.DisplayFor(modelItem => item.productType)</td>
                            <td>@Html.DisplayFor(modelItem => item.SaleAmount)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4">No data available</td>
                    </tr>
                }
              
            </tbody>
        </table>
    </div>

</body>
</html>