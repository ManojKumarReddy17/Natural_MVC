@model NatDMS.Models.DSRViewModel

@{
    ViewData["Title"] = "DisplayDsrs";
    ;
    string defaultStateId = "stn1";
    string defaultCityId = "ctn84179";
}

<!DOCTYPE html>
<html lang="en">


<head>

    <h1>DisplayDsrs</h1>



    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="~/js/jquery-3.6.0.min.js"></script>



    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>




    <style>
        .error {
            color: red;
        }
    </style>



    <script type="text/javascript">
     
 
        
        var defaultStateId = '@defaultStateId';
        var defaultCityId = '@defaultCityId';

        $(document).ready(function () {
            // Initialize state dropdown
            $('#state').val(defaultStateId).trigger('change'); // Set default state and trigger change

            // Initialize city dropdown if default city is required
            $('#city').val(defaultCityId).trigger('change'); // Set default city and trigger change
        });

        function statechange() {
            var stid = $('#state').val() || defaultStateId;
            var ddlcity = $('#city');

            // Disable and clear dropdowns
            ddlcity.prop('disabled', true).empty();
            $('#area').prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (stid.trim() !== '') {
                $.ajax({
                    url: '/DSR/GetCitiesByStateId',
                    type: 'GET',
                    dataType: 'json',
                    data: { stateId: stid },
                    success: function (d) {
                        ddlcity.append($("<option></option>").val('').html('--Select City--'));
                        $.each(d, function (i, city) {
                            ddlcity.append($("<option></option>").val(city.id).html(city.cityName));
                        });

                        ddlcity.prop('disabled', false); // Enable the city dropdown

                        // Trigger citychange if default city exists
                        if (defaultCityId) {
                            ddlcity.val(defaultCityId).trigger('change'); // Set default city and trigger change
                        }
                    },
                    error: function () {
                        alert('Error fetching cities!');
                    }
                });
            }
        }

        function citychange() {
            var cityid = $('#city').val() || defaultCityId;
            var ddlarea = $('#area');

            // Disable and clear dropdowns
            ddlarea.prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (cityid.trim() !== '') {
                $.ajax({
                    url: "/DSR/GetAreasByCityId",
                    type: 'GET',
                    dataType: 'json',
                    data: { cityId: cityid },
                    success: function (d) {
                        ddlarea.append($("<option></option>").val('').html('--Select Area--'));
                        $.each(d.items, function (i, area) {
                            ddlarea.append($("<option></option>").val(area.id).html(area.areaName));
                        });

                        ddlarea.prop('disabled', false); // Enable the area dropdown
                    },
                    error: function () {
                        alert('Error fetching areas!');
                    }
                });
            }
        }
        function areachange() {
            var areaId = $('#area').val();
            if (areaId.trim() != '') {
                var ddlExecutive = $('#executive');
                // ddlExecutive.empty();
                // $("distributor").empty();
                // $("retialor").empty();
                // Disable all dependent dropdowns initially
                ddlExecutive.prop('disabled', true).empty();
                $('#distributor').prop('disabled', true).empty();
                $('#retailor').prop('disabled', true).empty();
                $.ajax({
                    url: "/Dsr/GetExecutiveByArea",
                    type: 'GET',
                    dataType: 'json',
                    data: { areaId: areaId },
                    success: function (d) {
                        ddlExecutive.append($("<option></option>").val(''));
                        $.each(d, function (i, executive) {
                            ddlExecutive.append($("<option>" + executive.executive + "</option>").val(executive.id).html(executive.name));
                        });

                        ddlExecutive.prop('disabled', false); // Enable the executive dropdown
                        var selectedAreaName = $('#area option:selected').text();
                        $('#areaInput').val(selectedAreaName);
                    },
                    error: function (error) {
                        alert('Error ' + error.message);
                    }
                });
            }
            else {
                $('#executive').empty().append($("<option></option>").val('').html('--Select executive--')).prop('disabled', true);
                $('#distributor').empty().append($("<option></option>").val('').html('--Select distributor--')).prop('disabled', true);
                $('#retailor').empty().append($("<option></option>").val('').html('--Select retailor--')).prop('disabled', true);
            }
        }
        function executivechange() {
            var exid = $('#executive').val();
            var ddldis = $('#distributor');

            // Disable all dependent dropdowns initially
            ddldis.prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (exid.trim() != '') {
                $.ajax({
                    url: "/Dsr/GetDistributorByExecutiveId",
                    type: 'GET',
                    dataType: 'json',
                    data: { executiveId: exid },
                    success: function (d) {
                        ddldis.append($("<option></option>").val('').html('--Select Distributor--'));
                        $.each(d, function (i, distributor) {
                            ddldis.append($("<option></option>").val(distributor.id).html(distributor.distributorName));
                        });

                        ddldis.prop('disabled', false); // Enable the distributor dropdown
                    },
                    error: function () {
                        alert('Error fetching distributors!');
                    }
                });
            }
        }

        function distributorchange() {
            var disid = $('#distributor').val();
            var ddlret = $('#retailor');

            // Disable the retailor dropdown initially
            ddlret.prop('disabled', true).empty();

            if (disid.trim() != '') {
                $.ajax({
                    url: "/DSR/GetRetailorByDistributorId",
                    type: 'GET',
                    dataType: 'json',
                    data: { distributorId: disid },
                    success: function (d) {
                        ddlret.append($("<option></option>").val('').html('--Select Retailor--'));
                        $.each(d, function (i, retailor) {
                            ddlret.append($("<option></option>").val(retailor.id).html(retailor.retailorName));
                        });

                        ddlret.prop('disabled', false); // Enable the retailor dropdown
                    },
                    error: function () {
                        alert('Error fetching retailors!');
                    }
                });
            }
        }






        //Date

        document.getElementById("StartDate").defaultValue = "YYYY-MM-DD";
        document.getElementById("EndDate").defaultValue = "YYYY-MM-DD";


        function validateForm() {
            var isValid = true;

            // Clear previous error messages
            $(".error").text("");
            // Retrieve values from input fields
            var area = $("#area").val();
            var executive = $("#executive").val();
            var retailor = $("#retailor").val();
            var distributor = $("#distributor").val();
            var startDate = $("#StartDate").val();
            var endDate = $("#EndDate").val();

            var createdDate = $("#CreatedDate").val();
            if (!endDate) {
                $("#EndDateError").text("End Date is required.");
                isValid = false;
            }
            if (!startDate) {
                $("#CreatedDateError").text("StartDate is required.");
                isValid = false;
            }
            return isValid;
        }

        function Save() {
            if (!validateForm()) {
                return; // Stop if validation fails
            }

            var modelData = {
                Area: $("#area").val(),
                Executive: $("#executive").val(),
                Retailor: $("#retailor").val(),
                Distributor: $("#distributor").val(),
                StartDate: $("#StartDate").val(),
                EndDate: $("#EndDate").val(),

            };
         


            // Custom replacer function to include null values
            var jsonString = JSON.stringify(modelData, function (key, value) {
                // Include null values
                return value === undefined ? null : value;
            });

            $.ajax({
                url: "/DSR/DsrSearchProduct",
                type: "POST",
                data: jsonString,
                processData: false,
                contentType: "application/json",
                success: function (response) {
                    let result = JSON.stringify(response);
                    $("#Productlist TBODY").empty();
                    // Append new rows based on the response
                    $.each(response, function (i, ds) {


                            var anchorTag = '<a href="' + '@Url.Action("Edit", new { dsrid = "replaceme" })'.replace("replaceme", ds.id) + '" style="text-decoration: none; display: inline-block; color: orange;">' +
                    '<i class="material-icons">edit</i>' +
                                '</a>';

                        var details = '<a href="@Url.Action("Details", new { dsrid = "replaceme" })'.replace("replaceme", ds.id)+'" style="text - decoration: none; display: inline - block; color: green; ">'+
                            '<i class="material-icons">info</i>' + '</a>';

                             // Construct the delete icon and confirmation modal HTML string
    var deleteContent = '<a href="@Url.Action("Delete", new { dsrid = "replaceme" })'.replace("replaceme", ds.id)+'" style="text - decoration: none; display: inline - block; color: red; ">'+
                            '<i class="material-icons">delete</i>' + '</a>';



                             // Construct the delete icon and confirmation modal HTML string



                        var deleteContentnotification =

                            '<div style="display: flex; justify-content: center; align-items: center;">' +

                            '<i onclick="confirmDelete(\'' + ds.id + '\', true)" class="material-icons" style="color: red;cursor: pointer;">delete</i>' +
                            '</div>' +
                            '<div id="deleteConfirmationModal_' + ds.id + '" class="modal" role="dialog">' +
                            '<div class="modal-dialog">' +
                            '<div class="modal-content">' +
                            '<div class="modal-header">' +
                            '<h5 class="modal-title">Delete Confirmation</h5>' +
                            '<button type="button" class="close" data-dismiss="modal" aria-label="Close">' +
                            '<span aria-hidden="true">&times;</span>' +
                            '</button>' +
                            '</div>' +
                            '<div class="modal-body">' +
                            '<p>Are you sure you want to delete this item?</p>' +
                            '</div>' +
                            '<div class="modal-footer">' +
                            '<button type="button" class="btn btn-secondary" onclick="confirmDelete(\'' + ds.id + '\', false)">No</button>' +
                            '<form id="deleteForm_' + ds.id + '" action="/DSR/Deletedsr" method="post">' +
                            '<input type="hidden" name="dsrId" value="' + ds.id + '" />' +
                            '<button type="submit" class="btn btn-danger">Yes</button>' +
                            '</form>' +
                            '</div>' +
                            '</div>' +
                            '</div>' +
                            '</div>';




                        $("#Productlist").append(
                            '<tr>' +
                            '<td>' + ds.area + '</td>' +
                            '<td>' + ds.executive + '</td>' +
                            '<td>' + ds.distributor + '</td>' +
                            '<td>' + ds.retailor + '</td>' +
                            '<td>' + ds.orderBy + '</td>' +
                            '<td>' + ds.totalAmount + '</td>' +
                            '<td>' + anchorTag + '</td>' +
                            '<td>' + details + '</td>' +

                            '<td>' + deleteContentnotification + '</td>' +

                            '</tr>'
                        );
                    });
                },
                error: function (request, status, error) {
                    alert(request.responseText);
                }
            });
        }



        //-------------SCRIPT FOR DELETE POPUP------------//

        function confirmDelete(uniqueId, isTrue) {
            var deleteSpan = 'deleteSpan_' + uniqueId;
            var confirmDeleteSpan = 'confirmDeleteSpan_' + uniqueId;

            if (isTrue) {
                $('#' + deleteSpan).hide();
                $('#' + confirmDeleteSpan).show();
                showModal(uniqueId);
            } else {
                $('#' + deleteSpan).show();
                $('#' + confirmDeleteSpan).hide();
                hideModal(uniqueId);
            }
        }
        function showModal(uniqueId) {
            var modal = $('#deleteConfirmationModal_' + uniqueId);
            modal.modal('show');
        }

        function hideModal(uniqueId) {
            var modal = $('#deleteConfirmationModal_' + uniqueId);
            modal.modal('hide');
        }


    </script>


</head>

<body>
    <p>
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-center">
            </div>
            <a href="@Url.Action("CreateDsr")" class="d-flex align-items-center">
                @*<i class="material-icons">add</i>*@
                @*<i class="material-icons">add</i>*@
                <i class="material-icons">list_alt</i>



                <b><span style="font-weight:bold;">CREATE DSR</span></b>
            </a>
        </div>

    </p>







    <div class="form-group">
        <style>
            .form-group {
                display: flex;
                justify-content: space-between;
            }

                .form-group b {
                    width: 30%;
                    box-sizing: border-box;
                }
        </style>
        <b>


            @Html.LabelFor(model => model.State)
            @Html.DropDownListFor(model => model.State, new SelectList(Model.StateList, "Id", "StateName", defaultStateId),
                     new { @id = "state", onchange = "statechange()", @class = "form-select", required = "required" })


        </b>
        <b>
            @Html.LabelFor(model => model.City)
            @Html.DropDownListFor(model => model.City, new SelectList(new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value ="" },
            }, "Value", "Text"), new { @id = "city", @onchange = "citychange()", @class = "form-select", required = "required" })


        </b>

        <div>
            <b>
                @Html.LabelFor(model => model.Area)

                <input type="text" id="areaInput" oninput="filterAreas()" placeholder="Search for Area">

                @* <input type="text" id="areaInput" oninput="filterAreas()" placeholder="Search for Area"> *@

            </b>
            <div id="areaPopup" class="popup">
                @Html.DropDownListFor(model => model.Area, new List<SelectListItem>
                {
                new SelectListItem {Text = "", Value = ""}
                // Add other SelectListItem items dynamically if needed
                }, new { @id = "area", @onchange = "areachange()", @class = "form-select", style = "flex-grow: 1; max-height: 100px; overflow-y: auto;", required = "required" })
            </div>
        </div>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var stateDropdown = document.getElementById("state");
                var cityDropdown = document.getElementById("city");
                var areaDropdown = document.getElementById("area");
                var executiveDropdown = document.getElementById("executive");
                var distributorDropdown = document.getElementById("distributor");
                var retailorDropdown = document.getElementById("retailor");

                // Function to reset other dropdowns and close popup
                function resetOtherDropdowns() {
                    cityDropdown.value = "";
                    areaDropdown.value = "";
                    areaInput.value = "";
                    document.getElementById("areaPopup").style.display = "";
                    executiveDropdown.value = "";
                    distributorDropdown.value = "";
                    retailorDropdown.value = "";
                }
                function resetOtherDropdown() {
                    
                    areaDropdown.value = "";
                    areaInput.value = "";
                    document.getElementById("areaPopup").style.display = "";
                    executiveDropdown.value = "";
                    distributorDropdown.value = "";
                    retailorDropdown.value = "";
                }

                // State dropdown change event
                stateDropdown.addEventListener("change", function () {
                    resetOtherDropdowns();

                });
                cityDropdown.addEventListener("change", function () {
                    resetOtherDropdown();

                });

                // Area dropdown change event
                areaDropdown.addEventListener("change", function () {
                    var selectedOption = areaDropdown.options[areaDropdown.selectedIndex];
                    if (selectedOption.value !== "") {
                        document.getElementById("areaInput").value = selectedOption.textContent.trim();
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Area input click event to show popup
                document.getElementById("areaInput").addEventListener("click", function () {
                    document.getElementById("areaPopup").style.display = "block";
                });

                // Close area popup when clicking outside
                document.addEventListener("click", function (e) {
                    if (!document.getElementById("areaInput").contains(e.target) && !areaDropdown.contains(e.target)) {
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Function to filter area options based on input
                function filterAreas() {
                    var input = document.getElementById("areaInput");
                    var filter = input.value.toUpperCase();
                    var options = areaDropdown.getElementsByTagName("option");

                    for (var i = 0; i < options.length; i++) {
                        var txtValue = options[i].textContent || options[i].innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            options[i].style.display = "";
                        } else {
                            options[i].style.display = "none";
                        }
                    }

                    areaDropdown.size = options.length;
                }

                // Area input keyup event for filtering
                document.getElementById("areaInput").addEventListener("keyup", function () {
                    filterAreas();
                });
            });
        </script>
        <b>
            @Html.LabelFor(model => model.Executive)
            @Html.DropDownListFor(model => model.Executive, new SelectList(Model.ExecutiveList, "Id", "Executive"),
                                                    "--Select Executive--", new { @id = "executive", onchange = "executivechange()", @class = "form-select" })

            @Html.HiddenFor(model => model.ExecutiveList, new { id = "executiveListHidden" })

        </b>
        <b>
            @Html.LabelFor(model => model.Distributor)
            @Html.DropDownListFor(model => model.Distributor, new List<SelectListItem>
                                                        {
        new SelectListItem { Text = "", Value = "" }
        }, new { @id = "distributor", onchange = "distributorchange()", @class = "form-select" })

        </b>
        <b>
            @Html.LabelFor(model => model.Retailor)
            @Html.DropDownListFor(model => model.Retailor, new List<SelectListItem>
                                                        {
        new SelectListItem { Text = "", Value = "" }
        }, new { @id = "retailor", @class = "form-select" })

        </b>


        <b>
            @Html.LabelFor(model => model.StartDate)
            <input type="date" id="StartDate" name="StartDate" class="datepicker" required>
            <span id="CreatedDateError" class="error"></span>

            @Html.LabelFor(model => model.EndDate)
            <input type="date" id="EndDate" name="EndDate" class="datepicker" required>
            <span id="EndDateError" class="error"></span>
       
        </b>
        <div class="col-md-2">
            <div class="form-group">
                <button type="submit" class="btn btn-secondary my-4" onclick="Save()">
                    <i class="material-icons" style="font-size:20px;display:flex;justify-content:center;
                                  align-items:center;">search</i>
                </button>

            </div>
        </div>

    </div>


    <table class="table table-bordered table-striped " id="Productlist">
        
        <thead class="table-light">
            <tr>
                <th>Area</th>
                <th>Executive</th>
                <th>Distributor</th>
                <th>Retailor</th>
                <th>OrderBy</th>

                <th>TotalAmount</th>
                <th>Edit</th>
                <th>Details</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.dsr)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Area, new { @id = "area" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Executive, new { @id = "executive" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Distributor, new { @id = "distributor" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Retailor, new { @id = "distributor" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderBy, new { @id = "orderBy" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalAmount, new { @id = "totalAmount" })
                    </td>
                    <td>

                        <a href="@Url.Action("Edit", new { dsrid = item.Id })" style="text-decoration: none; display: inline-block; color: orange;">
                            <i class="material-icons">edit</i>
                        </a>

                    </td>
                    <td>
                        <a href="@Url.Action("Details", new { dsrid = item.Id })" style="text-decoration: none; display: inline-block; color:green;">
                            <i class="material-icons">info</i>
                        </a>
                    </td>



                    <td>
                        <!-- Delete Icon -->
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <i onclick="confirmDelete('@item.Id', true)" class="material-icons" style="color: red;cursor: pointer;">delete</i>
                        </div>

                        <!-- Delete Confirmation Modal -->
                        <div id="deleteConfirmationModal_@item.Id" class="modal" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Delete Confirmation</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are you sure you want to delete this item?</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" onclick="confirmDelete('@item.Id', false)">No</button>
                                        @using (Html.BeginForm("Deletedsr", "DSR", new { dsrId = item.Id }, FormMethod.Post))
                                        {
                                            <button type="submit" class="btn btn-danger">Yes</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>

                </tr>
            }
        </tbody>
    </table>
</body>
</html>
