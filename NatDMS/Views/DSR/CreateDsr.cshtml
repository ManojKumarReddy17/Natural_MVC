@model Natural.Core.Models.Dsrcreate


@{
    ViewData["Title"] = "CreateDsr";

}

<!DOCTYPE html>
<html lang="en">

<h1>CreateDsr</h1>

<head>



    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    @*<link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">*@
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>




    <script type="text/javascript">



        function statechange() {
            // var defaultStateId = 'defaultStateId';
            // var defaultCityId = 'defaultCityId';
            var stid = $('#state').val() == null ? defaultStateId : $('#state').val();
            var ddlcity = $('#city');

            // Disable all dependent dropdowns initially
            ddlcity.prop('disabled', true).empty();
            $('#area').prop('disabled', true).empty();
            // $('#areaInput').prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (stid.trim() != '') {
                $.ajax({
                    url: '/DSR/GetCitiesByStateId',
                    type: 'GET',
                    dataType: 'json',
                    data: { stateId: stid },
                    success: function (d) {
                        ddlcity.append($("<option></option>").val('').html('--Select City--'));
                        $.each(d, function (i, city) {
                            ddlcity.append($("<option></option>").val(city.id).html(city.cityName));
                        });

                        // If default state is selected, also set the default city
                        // if (stid == defaultStateId) {
                        //     ddlcity.val(defaultCityId).change(); // Trigger change to populate areas
                        // }

                        ddlcity.prop('disabled', false); // Enable the city dropdown
                    },
                    error: function () {
                        alert('Error fetching cities!');
                    }
                });
            }
        }

        function citychange() {
            // var defaultCityId = 'defaultCityId';
            var cityid = $('#city').val() == null ? defaultCityId : $('#city').val();
            var ddlarea = $('#area');
            //ddlarea.empty;
            // Disable all dependent dropdowns initially
            ddlarea.prop('disabled', true).empty();
            $('#executive').prop('disabled', true).empty();
            $('#distributor').prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (cityid.trim() != '') {
                $.ajax({
                    url: "/DSR/GetAreasByCityId",
                    type: 'GET',
                    dataType: 'json',
                    data: { cityId: cityid },
                    success: function (d) {
                        ddlarea.append($("<option></option>").val('').html('--Select Area--'));
                        $.each(d.items, function (i, area) {
                            ddlarea.append($("<option></option>").val(area.id).html(area.areaName));
                        });

                        ddlarea.prop('disabled', false); // Enable the area dropdown
                    },
                    error: function () {
                        alert('Error fetching areas!');
                    }
                });
            }
            // else {
            //     $('#executive').empty().append($("<option></option>").val('').html('--Select executive--')).prop('disabled', true);
            //     $('#distributor').empty().append($("<option></option>").val('').html('--Select distributor--')).prop('disabled', true);
            //     $('#retailor').empty().append($("<option></option>").val('').html('--Select retailor--')).prop('disabled', true);

            // }      
            }
            function areachange() {
            var areaId = $('#area').val();
            if (areaId.trim() != '') {
                var ddlExecutive = $('#executive');
                // ddlExecutive.empty();
                // $("distributor").empty();
                // $("retialor").empty();
                // Disable all dependent dropdowns initially
                ddlExecutive.prop('disabled', true).empty();
                $('#distributor').prop('disabled', true).empty();
                $('#retailor').prop('disabled', true).empty();
                $.ajax({
                    url: "/Dsr/GetExecutiveByArea",
                    type: 'GET',
                    dataType: 'json',
                    data: { areaId: areaId },
                    success: function (d) {
                        ddlExecutive.append($("<option></option>").val(''));
                        $.each(d, function (i, executive) {
                            ddlExecutive.append($("<option>" + executive.executive + "</option>").val(executive.id).html(executive.name));
                        });

                        ddlExecutive.prop('disabled', false); // Enable the executive dropdown
                        var selectedAreaName = $('#area option:selected').text();
                        $('#areaInput').val(selectedAreaName);
                    },
                    error: function (error) {
                        alert('Error ' + error.message);
                    }
                });
            }
            else {
                $('#executive').empty().append($("<option></option>").val('').html('--Select executive--')).prop('disabled', true);
                $('#distributor').empty().append($("<option></option>").val('').html('--Select distributor--')).prop('disabled', true);
                $('#retailor').empty().append($("<option></option>").val('').html('--Select retailor--')).prop('disabled', true);
            }
        }
        function executivechange() {
            var exid = $('#executive').val();
            var ddldis = $('#distributor');

            // Disable all dependent dropdowns initially
            ddldis.prop('disabled', true).empty();
            $('#retailor').prop('disabled', true).empty();

            if (exid.trim() != '') {
                $.ajax({
                    url: "/Dsr/GetDistributorByExecutiveId",
                    type: 'GET',
                    dataType: 'json',
                    data: { executiveId: exid },
                    success: function (d) {
                        ddldis.append($("<option></option>").val('').html('--Select Distributor--'));
                        $.each(d, function (i, distributor) {
                            ddldis.append($("<option></option>").val(distributor.id).html(distributor.distributorName));
                        });

                        ddldis.prop('disabled', false); // Enable the distributor dropdown
                    },
                    error: function () {
                        alert('Error fetching distributors!');
                    }
                });
            }
        }

        function distributorchange() {
            var disid = $('#distributor').val();
            var ddlret = $('#retailor');

            // Disable the retailor dropdown initially
            ddlret.prop('disabled', true).empty();

            if (disid.trim() != '') {
                $.ajax({
                    url: "/DSR/GetRetailorByDistributorId",
                    type: 'GET',
                    dataType: 'json',
                    data: { distributorId: disid },
                    success: function (d) {
                        ddlret.append($("<option></option>").val('').html('--Select Retailor--'));
                        $.each(d, function (i, retailor) {
                            ddlret.append($("<option></option>").val(retailor.id).html(retailor.retailorName));
                        });

                        ddlret.prop('disabled', false); // Enable the retailor dropdown
                    },
                    error: function () {
                        alert('Error fetching retailors!');
                    }
                });
            }
        }
       
        //    function areachange() {
        //     var areaId = $('#area').val();
        //     if (areaId.trim() != '') {
        //         var ddlExecutive = $('#executive');
        //         ddlExecutive.empty();
        //         $.ajax({
        //             url: "/Dsr/GetExecutiveByArea",
        //             type: 'GET',
        //             dataType: 'json',
        //             data: { areaId: areaId },
        //             success: function (d) {
        //                 ddlExecutive.append($("<option></option>").val(''));
        //                 $.each(d, function (i, executive) {
        //                     ddlExecutive.append($("<option>" + executive.executive + "</option>").val(executive.id).html(executive.name));
        //                 });

        //                 var selectedAreaName = $('#area option:selected').text();
        //                 $('#areaInput').val(selectedAreaName);
        //             },
        //             error: function (error) {
        //                 alert('Error ' + error.message);
        //             }
        //         });
        //     }
        // }

        // function executivechange() {
        //     var exid = $('#executive').val();
        //     if (exid.trim() != '') {
        //         var ddldis = $('#distributor');
        //         ddldis.empty();

        //         $.ajax(
        //             {
        //                 url: "/Dsr/GetDistributorByExecutiveId",
        //                 type: 'GET',
        //                 dataType: 'json',

        //                 data: { executiveId: exid },

        //                 success: function (d) {
        //                     ddldis.append($("<option></option>").val('').html('--Select Distributor--'));
        //                     $.each(d, function (i, distributors) {
        //                         ddldis.append($("<option>" + distributors.distributorName + "</option>").val(distributors.id).html(distributors.distributorName));
        //                     });
        //                 },
        //                 error: function () {
        //                     alert('Error!');
        //                 }
        //             });
        //     }
        // }


        // function distributorchange() {

        //     var disid = $('#distributor').val();
        //     if (disid.trim() != '') {
        //         var ddlret = $('#retailor');
        //       ddlret.empty();

        //         $.ajax(
        //             {
        //                 url: "/DSR/GetRetailorByDistributorId",
        //                 type: 'GET',
        //                 dataType: 'json',
        //                 data: { distributorId: disid },
        //                 success: function (d) {
        //                     ddlret.append($("<option></option>").val('').html('--Select Retailors--'));
        //                     $.each(d, function (i, retailors) {

        //                         ddlret.append($("<option>" + retailors.retailorName + "</option>").val(retailors.id).html(retailors.retailorName));
        //                     });
        //                 },
        //                 error: function () {
        //                     alert('Error!');
        //                 }
        //             });
        //     }
        // }



        function calculateTotalAmount(row) {
            var price = parseFloat(row.find('.price').val());
            var quantity = parseFloat(row.find('.quantity').val());

            // Check if either price or quantity is null
            if (isNaN(price) || isNaN(quantity)) {
                // If either price or quantity is null, set total to null
                row.find('.total').text(''); // Clear total field
            } else {
                // Calculate total only if both price and quantity are valid
                var total = price * quantity;
                row.find('.total').text(total.toFixed(2));
            }
        }


        $(document).on('input', '.price, .quantity', function () {
            var row = $(this).closest('tr');
            calculateTotalAmount(row);
        });

        $(document).ready(function () {
            $('.price, .quantity').each(function () {
                var row = $(this).closest('tr');
                calculateTotalAmount(row);
            });
        });



        // search ajax

        function Save() {

            var modelData = {
                Executive: $("#executive").val(),
                Retailor: $("#retailor").val(),
                Distributor: $("#distributor").val(),
                Category: $("#Category").val(),
                Product: $("#Product").val(),
                CreatedDate: $("#StartDate").val(),
                ProductList: []
            };

            $("#Productlist TBODY TR").each(function () {
                var rowData = {
                    Category: $(this).find("td:eq(0)").text().trim(),
                    ProductName: $(this).find("td:eq(1)").text().trim(),
                    Quantity: $(this).find(".quantity").val() || null, // Use null if value is falsy
                    Price: $(this).find(".price").val() || null, // Use null if value is falsy
                    Weight: $(this).find("td:eq(4)").text().trim(),
                    Total: $(this).find("td:eq(5)").text().trim() || null, // Use null if value is falsy
                    Id: $(this).find("input[type=hidden][name$='.Id']").val()

                };
                modelData.ProductList.push(rowData);
            });

            // Custom replacer function to include null values
            var jsonString = JSON.stringify(modelData, function (key, value) {
                // Include null values
                return value === undefined ? null : value;
            });

            $.ajax({
                url: "/DSR/SearchProduct",
                type: "POST",
                data: jsonString,
                processData: false,
                contentType: "application/json",
                success: function (response) {
                    let result = JSON.stringify(response);
                    $("#Productlist TBODY").empty();
                    // Append new rows based on the response
                    $.each(response, function (i, ds) {
                        var formattedPrice = parseFloat(ds.price).toFixed(3);
                        var inputField = '<input type="number" name="price" class="form-control price" style="width: 100px" step="0.001" value="' + formattedPrice + '"/>';

                        var idField = '<input type="hidden" name="id" value="' + ds.id + '"/>';


                        $("#Productlist").append(
                            '<tr>' +
                            '<td>' + ds.category + '</td>' +
                            '<td>' + ds.productName + '</td>' +
                            '<td>' + '<input type="number" name="quantity" class="form-control quantity" style="width: 100px" value="' + ds.quantity + '"/>' + '</td>' +
                            '<td>' + inputField + '</td>' +
                            '<td>' + ds.weight + '</td>' +

                            '<td class="total">' + (ds.total !== null ? ds.total : '') + '</td>' +
                            '<input type="hidden" name=".Id" value="' + ds.id + '"/>' +
                            '</tr>'
                        );
                    });
                },
                error: function (request, status, error) {
                    alert(request.responseText);
                }
            });
        }




    // creste dsr ajax

        // function Insert() {

        //     var modelData = {
        //         Executive: $("#executive").val(),
        //         Retailor: $("#retailor").val(),
        //         Distributor: $("#distributor").val(),
        //         Category: $("#Category").val(),
        //         Product: $("#Product").val(),
        //         CreatedDate: $("#StartDate").val(),
        //         ProductList: []
        //     };
        //     $("#Productlist TBODY TR").each(function () {
        //         var rowData = {
        //             Category: $(this).find("td:eq(0)").text().trim(),
        //             ProductName: $(this).find("td:eq(1)").text().trim(),
        //             Quantity: $(this).find(".quantity").val() || null, // Use null if value is falsy
        //             Price: $(this).find(".price").val() || null, // Use null if value is falsy
        //             Weight: $(this).find("td:eq(4)").text().trim(),
        //             Total: $(this).find("td:eq(5)").text().trim() || null, // Use null if value is falsy
                   
        //             Id: $(this).find("input[type=hidden][name$='.Id']").val()

        //         };
        //         modelData.ProductList.push(rowData);
        //     });


        //     var jsonString = JSON.stringify(modelData, function (key, value) {
        //         // Include null values
        //         return value === undefined ? null : value;
        //     });


        //     $.ajax({
        //         url: "/DSR/CreateDsr",
        //         type: "POST",
        //         data: jsonString,
        //         contentType: "application/json",
        //         success: function (response) {
        //             alert("Succesfuly Inserted");
        //             var id = response.id;
        //             var url = '@Url.Action("Details", "DSR")' +'?dsrid='+id;
        //                         window.location.href = url;
        //             // Calculate total amounts for newly added rows
        //             //calculateTotalAmounts();
        //         },
        //         error: function (request, status, error) {
        //             alert(request.responseText);
        //         }
        //     });
        // }

        // //date
        // document.getElementById("StartDate").defaultValue = "YYYY-MM-DD";
        $(document).ready(function() {
    // Function to validate form and toggle button visibility
    function validateForm() {
        var isValid = true;

        // Clear previous error messages
        $(".error").text("");

        // Retrieve values from input fields
        var executive = $("#executive").val();
        var retailor = $("#retailor").val();
        var distributor = $("#distributor").val();
        var category = $("#Category").val();
        var product = $("#Product").val();
        var createdDate = $("#StartDate").val();

        // Validate required fields
        if (!executive) {
            $("#ExecutiveError").text("Executive is required.");
            isValid = false;
        }
        if (!retailor) {
            $("#RetailorError").text("Retailor is required.");
            isValid = false;
        }
        if (!distributor) {
            $("#DistributorError").text("Distributor is required.");
            isValid = false;
        }
        // Uncomment these lines if you need category and product validation
        // if (!category) {
        //     $("#CategoryError").text("Category is required.");
        //     isValid = false;
        // }
        // if (!product) {
        //     $("#ProductError").text("Product is required.");
        //     isValid = false;
        // }
        if (!createdDate) {
            $("#StartDateError").text("Start Date is required.");
            isValid = false;
        }

        // Show or hide the submit button based on validation
        if (isValid) {
            $("#submitButton").show(); // Show submit button if valid
        } else {
            $("#submitButton").hide(); // Hide submit button if invalid
        }
    }

    // Bind validation function to input field changes
    $("#executive, #retailor, #distributor, #Category, #Product, #StartDate").on('input change', function() {
        validateForm();
    });

    // Bind Insert function to the button click event
    $("#submitButton").click(function() {
        Insert();
    });

    // Function to handle form submission via AJAX
    function Insert() {
        var isValid = true;

        // Clear previous error messages
        $(".error").text("");

        // Retrieve values from input fields
         var area = $("#area").val();
        var executive = $("#executive").val();
        var retailor = $("#retailor").val();
        var distributor = $("#distributor").val();
        var category = $("#Category").val();
        var product = $("#Product").val();
        var createdDate = $("#StartDate").val();

        // Validate required fields
        if (!executive) {
            $("#ExecutiveError").text("Executive is required.");
            isValid = false;
        }
        if (!retailor) {
            $("#RetailorError").text("Retailor is required.");
            isValid = false;
        }
        if (!distributor) {
            $("#DistributorError").text("Distributor is required.");
            isValid = false;
        }
        // Uncomment these lines if you need category and product validation
        // if (!category) {
        //     $("#CategoryError").text("Category is required.");
        //     isValid = false;
        // }
        // if (!product) {
        //     $("#ProductError").text("Product is required.");
        //     isValid = false;
        // }
        if (!createdDate) {
            $("#StartDateError").text("Start Date is required.");
            isValid = false;
        }

        if (!isValid) {
            $("#loadingIndicator").hide(); // Hide loading indicator if validation fails
            return; // Stop the function execution if validation fails
        }

        // Create model data
        var modelData = {
         area:area,
            Executive: executive,
            Retailor: retailor,
            Distributor: distributor,
            Category: category,
            Product: product,
            CreatedDate: createdDate,
            ProductList: []
        };

        // Iterate over each row in the table to build the ProductList
        $("#Productlist TBODY TR").each(function () {
            var rowData = {
                Category: $(this).find("td:eq(0)").text().trim(),
                ProductName: $(this).find("td:eq(1)").text().trim(),
                Quantity: $(this).find(".quantity").val() || null,
                Price: $(this).find(".price").val() || null,
                Weight: $(this).find("td:eq(4)").text().trim(),
                Total: $(this).find("td:eq(5)").text().trim() || null,
                Id: $(this).find("input[type=hidden][name$='.Id']").val()
            };
            modelData.ProductList.push(rowData);
        });

        // Convert model data to JSON string
        var jsonString = JSON.stringify(modelData, function (key, value) {
            return value === undefined ? null : value;
        });

        // Show loading indicator
        $("#loadingIndicator").show();

        // Make AJAX request
        $.ajax({
            url: "/DSR/CreateDsr",
            type: "POST",
            data: jsonString,
            contentType: "application/json",
            success: function (response) {
                $("#loadingIndicator").hide(); // Hide loading indicator
                alert("Successfully Inserted");
                var id = response.id;
                var url = '@Url.Action("Details", "DSR")' + '?dsrid=' + id;
                window.location.href = url;
            },
            error: function (request, status, error) {
                $("#loadingIndicator").hide(); // Hide loading indicator
                alert("An error occurred: " + request.responseText);
            }
        });
    }
});

      
    </script>


@* <script>
    $(document).ready(function () {
        var dropdown = $('#area'); // Cache the dropdown element

        // Create a search input field
        var searchInput = $('<input type="text" class="form-control" placeholder="Search area...">');
        dropdown.before(searchInput); // Insert the search input before the dropdown

        // Event handler for input change (search)
        searchInput.on('input', function () {
            var searchTerm = $(this).val().toLowerCase(); // Get the search term
            var options = dropdown.find('option'); // Cache the dropdown options

            // Show/hide options based on the search term
            options.each(function () {
                var text = $(this).text().toLowerCase(); // Get option text
                var visible = text.includes(searchTerm); // Check if text includes search term
                $(this).toggle(visible); // Toggle option visibility
            });
        });
    });
</script> *@


</head>

<body>

    <div class="row">
        <div>

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <style>
                .form-group {
                    display: flex;
                    justify-content: space-between;
                }

                    .form-group b {
                        width: 20%;
                        box-sizing: border-box;
                    }

                .search {
                    display: flex;
                    /*                    justify-content: space-evenly;*/
                    justify-content: space-evenly;
                }
 


              
            </style>
            <div class="form-group">
                     <b>
        

            @Html.LabelFor(model => model.State )
            @Html.DropDownListFor(model => model.State, new SelectList(Model.StateList, "Id", "StateName"), "--Select State--"
                    , new { @id = "state", onchange = "statechange()", @class = "form-select", required = "required" })


        </b>
     

        <b>
            @Html.LabelFor(model => model.City)
            @Html.DropDownListFor(model => model.City, new SelectList(new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value ="" },
            }, "Value", "Text"), new { @id = "city", @onchange = "citychange()", @class = "form-select", required = "required" })
       </b> 
           <div>
            <b>
                @Html.LabelFor(model => model.Area)

                <input style="padding: 0.375rem 2.25rem 0.375rem 0.75rem;" type="text" id="areaInput" oninput="filterAreas()" placeholder="Search for Area">

                @* <input type="text" id="areaInput" oninput="filterAreas()" placeholder="Search for Area"> *@

            </b>
            <div id="areaPopup" class="popup">
                @Html.DropDownListFor(model => model.Area, new List<SelectListItem>
                {
                new SelectListItem {Text = "", Value = ""}
                // Add other SelectListItem items dynamically if needed
                }, new { @id = "area", @onchange = "areachange()", @class = "form-select", style = "flex-grow: 1; max-height: 100px; overflow-y: auto;", required = "required" })
            </div>
        </div>
           <script>
            document.addEventListener("DOMContentLoaded", function () {
                var stateDropdown = document.getElementById("state");
                var cityDropdown = document.getElementById("city");
                var areaDropdown = document.getElementById("area");
                var executiveDropdown = document.getElementById("executive");
                var distributorDropdown = document.getElementById("distributor");
                var retailorDropdown = document.getElementById("retailor");

                // Function to reset other dropdowns and close popup
                function resetOtherDropdowns() {
                    cityDropdown.value = "";
                    areaDropdown.value = "";
                    areaInput.value = "";
                    document.getElementById("areaPopup").style.display = "";
                    executiveDropdown.value = "";
                    distributorDropdown.value = "";
                    retailorDropdown.value = "";
                }
                  // Function to reset other dropdowns and close popup
                function resetOtherDropdown() {
                    
                    areaDropdown.value = "";
                    areaInput.value = "";
                    document.getElementById("areaPopup").style.display = "";
                    executiveDropdown.value = "";
                    distributorDropdown.value = "";
                    retailorDropdown.value = "";
                }
                // State dropdown change event
                stateDropdown.addEventListener("change", function () {
                    resetOtherDropdowns();
                });
                cityDropdown.addEventListener("change", function () {
                resetOtherDropdown();

            });
                // Area dropdown change event
                areaDropdown.addEventListener("change", function () {
                    var selectedOption = areaDropdown.options[areaDropdown.selectedIndex];
                    if (selectedOption.value !== "") {
                        document.getElementById("areaInput").value = selectedOption.textContent.trim();
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Area input click event to show popup
                document.getElementById("areaInput").addEventListener("click", function () {
                    document.getElementById("areaPopup").style.display = "block";
                });

                // Close area popup when clicking outside
                document.addEventListener("click", function (e) {
                    if (!document.getElementById("areaInput").contains(e.target) && !areaDropdown.contains(e.target)) {
                        document.getElementById("areaPopup").style.display = "none";
                    }
                });

                // Function to filter area options based on input
                function filterAreas() {
                    var input = document.getElementById("areaInput");
                    var filter = input.value.toUpperCase();
                    var options = areaDropdown.getElementsByTagName("option");

                    for (var i = 0; i < options.length; i++) {
                        var txtValue = options[i].textContent || options[i].innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            options[i].style.display = "";
                        } else {
                            options[i].style.display = "none";
                        }
                    }

                    areaDropdown.size = options.length;
                }

                // Area input keyup event for filtering
                document.getElementById("areaInput").addEventListener("keyup", function () {
                    filterAreas();
                });
            });
        </script>


                
        <b>
            @Html.LabelFor(model => model.Executive)
            @Html.DropDownListFor(model => model.Executive, new List<SelectListItem>
            {
            new SelectListItem { Text = "", Value = "" }
            }, new { @id = "executive", @onchange = "executivechange()", @class = "form-select", required = "required" })

        </b>
                <b>
                    @Html.LabelFor(model => model.Distributor)
                    @Html.DropDownListFor(model => model.Distributor, new List<SelectListItem>
                                                                {
                new SelectListItem { Text = "", Value = "select" }
                }, new { @id = "distributor", onchange = "distributorchange()", @class = "form-select" })

                </b>
                <b>
                    @Html.LabelFor(model => model.Retailor)
                    @Html.DropDownListFor(model => model.Retailor, new List<SelectListItem>
                                                                {
                new SelectListItem { Text = "", Value = "select" }
                }, new { @id = "retailor", @class = "form-select" })

                </b>

                <b>
                    @Html.LabelFor(model => model.CreatedDate)
                    <input type="date" id="StartDate" name="StartDate" class="datepicker" style="margin-left: 10px;">
                </b>
               
 
            </div>

          
            <div class="search">

                
                <div class="col-sm-2">

                    <b>
                        @Html.LabelFor(model => model.Category)
                        @Html.DropDownListFor(model => model.Category, new SelectList(Model.CategoryList, "Id", "CategoryName"),
                                               "-SelectCategory-", new { @class = "form-select", id = "Category" })

                    </b>
                </div>
                <div class="col-sm-2">

                    <b>
                        @Html.LabelFor(model => model.Product)
                        @Html.TextBoxFor(model => Model.Product, new
                   {
                       @class = "form-control",
                       placeholder = "Enter ProductName",
                       onfocus = "movePlaceholder(this)",
                       id = "Product"
                   })
                    </b>
                </div>
                <div class="col-sm-2">

                    <b>
                        <button type="submit" class="btn btn-secondary my-4" onclick="Save()">
                            <i class="material-icons" style="font-size:20px;display:flex;justify-content:center;
                                  align-items:center;">search</i>
                        </button>
                    </b>
                </div>

            </div>



            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="table-responsive">
                            
                            <table class="table table-bordered table-striped " id="Productlist">
                                <thead class="table-light">
                                    <tr>
                                        <th>Category</th>
                                        <th>ProductName</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Weight</th>
                                        <th>Total</th>
                                        <th style="display:none;">Id</th> <!-- Hidden column for ID -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.ProductList)
                                    {
                                        <tr>
                                            <td>@Html.DisplayFor(modelItem => item.Category)</td>
                                            <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                                            <td>
                                                <input type="number" class="form-control quantity" style="width: 100px" value="@item.Quantity" />

                                            </td>
                                            <td>
                                                <input type="number" class="form-control price" style="width: 100px" value="@item.Price" />
                                            </td>
                                            <td>@Html.DisplayFor(modelItem => item.Weight)</td>


                                            <td class="total">@Html.DisplayFor(modelItem => item.Total)</td>
                                            <td style="display:none;">@Html.HiddenFor(modelItem => item.Id)</td> <!-- Hidden field for ID -->
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
               <div class="form-group">
        <input type="submit" id="submitButton" value="Create" class="btn btn-primary" style="display:none;" />
    </div>

         @*    <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" onclick="Insert()" />
            </div> *@

        </div>





    </div>




</body>

<!--@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css">-->

    @*<link href="https://maxcdn.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">*@

    <!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css">
    <script>$(function () {
            $('#datepicker').datetimepicker();
        });</script>
}-->

</html>