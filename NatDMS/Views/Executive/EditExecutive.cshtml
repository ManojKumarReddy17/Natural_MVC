@model NatDMS.Models.ED_EditViewModel

@{
    ViewData["Title"] = "EditExecutive";
}



<!DOCTYPE html>

<html lang="en">
<head>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">
    <style>
        .scrollable-checkboxes {
        
            max-height: 100px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px
        }
    </style>

</head>

<body>

    @using (Html.BeginForm("EditExecutive", "Executive", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", enctype = "multipart/form-data" }))
    {
        <div class="row justify-content-center">

            <div class="col-md-3">
                @Html.Hidden("Id", Model.Id)

                <div class="form-group">
                   
                    <b>
                        @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.FirstName, new { @class = "form-control", @rows = 2, @style = "resize:none; word-wrap:break-word;" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </b>

                </div> 

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </b>
                </div>
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.MobileNumber, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                    </b>
                </div>
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Password, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </b>
                </div>

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.City)
                        @Html.DropDownListFor(model => model.CityId, new SelectList(Model.CityList, "Id", "CityName"),
                    "--Select City--", new { @id = "city", onchange = "citychange()", @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </b>
                </div>
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Latitude)
                        @Html.TextBoxFor(model => model.Latitude, new { @class = "form-control",
                    placeholder = "Enter Latitude", onfocus = "movePlaceholder(this)"})
                        
                    </b>
                </div>

            </div>


            <div class="col-md-3">


                <div class="form-group">
                  
                    <b>
                        @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.LastName, new { @class = "form-control", @rows = 2, @style = "resize:none; word-wrap:break-word;" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </b>
                </div>

              
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Address, new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @rows = 3, @style = "resize:none; word-wrap:break-word;" })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </b>
                </div>
              


             

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.UserName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                    </b>
                </div>

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.State, new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.StateId, new SelectList(Model.StateList, "Id", "StateName"),
                    "--Select State--", new { @id = "state", onchange = "statechange()", @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </b>
                </div>
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Area)
                        <div id="area-container" class="scrollable-checkboxes">
                            @foreach (var area in Model.AreaList.OrderBy(a => a.AreaName))
                            {
                                <div class="form-check">
                                    <input type="checkbox" id="area_@area.Id" name="Area" value="@area.Id"
                                    @(Model.Area != null && Model.Area.Contains(area.AreaName.ToString()) ? "checked" : "") />
                                    <label class="form-check-label" for="area_@area.Id">@area.AreaName</label>
                                </div>
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
                    </b>
                </div>


                 <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Longitude)
                        @Html.TextBoxFor(model => model.Longitude, new { @class = "form-control",
                    placeholder = "Enter Longitude", onfocus = "movePlaceholder(this)"})
                         @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                    </b>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ProfileImage, "Profile image")
                    @Html.TextBoxFor(model => model.ProfileImage, new
                {
                type = "file",
                @class = "form-control custom-file-input",
                @placeholder = "Choose Profile Image",
                @onchange = "return ShowImagePreview(this)"
                })
                    <img id="imagePreview" src="@Model.Image" style="max-width: 100px; max-height: 100px; display: block; margin-top: 10px;" />
                    @Html.ValidationMessageFor(model => model.ProfileImage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <br />           
       
        <br/>
        <div class="text-center">
            <button type="submit" class="btn btn-outline-danger">SUBMIT</button>
        </div>

    }


    <div class="row">
        <div class="col-md-10 d-flex justify-content-between">
            <a href="@Url.Action("EditExecutive")" class="d-flex align-items-center mr-6">
                <i class="material-icons" style="font-size:20px;">refresh</i>
                <span class="ml-2" style="font-weight: bold;">RESET</span>
            </a>

            <a href="@Url.Action("DisplayExecutives")" class="d-flex align-items-center">
                <i class="material-icons" style="font-size:20px;">arrow_back</i>
                <span class="ml-2" style="font-weight: bold;">BACK TO LIST</span>
            </a>
        </div>
    </div>


    
    <script src="~/js/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#FirstName, #LastName').on('keypress', function (e) {
                var keyCode = e.which || e.keyCode;
                // Allow letters and space only
                if (!(keyCode >= 65 && keyCode <= 90) && // A-Z
                    !(keyCode >= 97 && keyCode <= 122) && // a-z
                    keyCode !== 32) { // Space 
                    e.preventDefault();
                }
            });
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#MobileNumber').on('input', function (e) {    
                var inputValue = $(this).val();
                // Allow only numbers
                var numericValue = inputValue.replace(/\D/g, '');
                // Ensure the length is not more than 10 characters
                numericValue = numericValue.substring(0, 10);
                // Remove leading zeros
                numericValue = numericValue.replace(/^0+/, '');
                // Update the input value
                $(this).val(numericValue);
            });
        });
    </script>

    <script type="text/javascript">
        function statechange() {
            
            var stid = $('#state').val();
            if (stid.trim() != '') {
                var ddlcity = $('#city');

                ddlcity.empty();

                $.ajax(
                    {
                        url: "/Executive/GetCitiesbyStateId",

                        type: 'GET',
                        dataType: 'json',
                        data: { stateId: stid },

                        success: function (d) {

                            ddlcity.append($("<option></option>").val('').html('--SelectCity--'));
                            $.each(d, function (i, cities) {

                                ddlcity.append($("<option>" + cities.cityName + "</option>").val(cities.id).html(cities.cityName));

                            });
                        },
                        error: function () {
                            alert('Error!');
                        }
                    });
            }

        }

        function citychange() {
            var cityid = $('#city').val();
            if (cityid.trim() != '') {
                var ddlarea = $('#area');


                ddlarea.empty();

                $.ajax(
                    {
                        url: "/Executive/GetAreasByCityId",

                        type: 'GET',
                        dataType: 'json',
                        data: { cityId: cityid },

                        success: function (d) {

                            ddlarea.append($("<option></option>").val('').html('--SelectArea--'));
                            $.each(d.items, function (i, areas) {

                                ddlarea.append($("<option>" + areas.areaName + "</option>").val(areas.id).html(areas.areaName));

                            });
                        },
                        error: function () {
                            alert('Error!');
                        }
                    });
            }

        }
    </script>
    <script>
       
        // Function to handle file input change event
        function handleFileInputChange(event) {
            const file = event.target.files[0];
            if (file) {
                // Assuming you have an img element with id "presignedurl"
                const imgElement = document.getElementById('presignedurl');
                imgElement.src = URL.createObjectURL(file);
            }
        }

        // Add event listener to the file input element
        const fileInput = document.getElementById('profileImageInput');

        fileInput.addEventListener('change', handleFileInputChange);
        function ShowImagePreview(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#imagePreview').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>

</body>
</html>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }+
}
