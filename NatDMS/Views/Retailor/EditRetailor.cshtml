@model NatDMS.Models.RetailorEditViewModel

@{
    ViewData["Title"] = "EditRetailor";
}

<!DOCTYPE html>

<html lang="en">
<head>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#FirstName, #LastName').on('keypress', function (e) {
                var keyCode = e.which || e.keyCode;
              
                if (!(keyCode >= 65 && keyCode <= 90) && 
                    !(keyCode >= 97 && keyCode <= 122) && 
                    keyCode !== 32) { 
                    e.preventDefault();
                }
            });
        });
    </script>
</head>

<body>

    @using (Html.BeginForm("EditRetailor", "Retailor", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", enctype = "multipart/form-data" }))
    {
        <div class="row justify-content-center">

            <div class="col-md-3" style="overflow-x: hidden;">

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.RetailerName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </b>
                </div>

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </b>
                </div>

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.MobileNumber, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                    </b>
                </div>
                 
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.CityId)
                        @Html.DropDownListFor(model => model.CityId, new SelectList(Model.Cities, "Id", "CityName"),
                    "--Select City--", new { @id = "city", onchange = "citychange()", @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                    </b>
                </div>
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Latitude)
                        @Html.TextBoxFor(model => model.Latitude, new
                            {
                                @class = "form-control",
                                placeholder = "Enter Latitude",
                                onfocus = "movePlaceholder(this)"
                            })
                          @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" }) 
                    </b>
                </div>
            </div>

            <div class="col-md-3">

                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </b>
                </div>



                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Address, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </b>
                </div>


                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.StateId, new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.StateId, new SelectList(Model.States, "Id", "StateName"),
                    "--Select State--", new { @id = "state", onchange = "statechange()", @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                    </b>
                </div>


                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.AreaId)
                        @Html.DropDownListFor(model => model.AreaId, new SelectList(Model.Areas, "Id", "AreaName"),
                    "--Select Area--", new { id = "areas", @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.AreaId, "", new { @class = "text-danger" })
                    </b>
                </div>
               
                <div class="form-group">
                    <b>
                        @Html.LabelFor(model => model.Longitude)
                        @Html.TextBoxFor(model => model.Longitude, new
                            {
                                @class = "form-control",
                                placeholder = "Enter Longitude",
                                onfocus = "movePlaceholder(this)"
                            })
                          @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" }) 
                    </b>
                </div>

                <div class="form-group">
                    

                    @if (!string.IsNullOrEmpty(@Model.Image))
                    {
                        <img src="@Model.Image" alt="ProfileImage" width="100" height="100" class="img-responsive" id="presignedurl">
                    }
                    else
                    {
                        <!-- Display a default "no image" placeholder -->
                        <img src="~/image/no-image-placeholder.svg" alt="ProfileImage" width="100" height="100" class="img-responsive" id="presignedurl">
                    }

                    <input type="file" id="profileImageInput" name="profileImage" accept="image/*" style="display: none;">
                    <label for="profileImageInput" class="btn btn-link">
                        <i class="bi bi-image"></i> Change ProfileImage
                    </label>
                </div>
            </div>
        </div>

        <br />
        <div class="text-center">
            <button type="submit" class="btn btn-outline-danger">SUBMIT</button>
        </div>
    }


    <div class="row">
        <div class="col-md-10 d-flex justify-content-between">
            <a href="@Url.Action("EditRetailor")" class="d-flex align-items-center mr-6">
                <i class="material-icons" style="font-size:20px;">refresh</i>
                <span class="ml-2" style="font-weight: bold;">RESET</span>
            </a>

            <a href="@Url.Action("DisplayRetailors")" class="d-flex align-items-center">
                <i class="material-icons" style="font-size:20px;">arrow_back</i>
                <span class="ml-2" style="font-weight: bold;">BACK TO LIST</span>
            </a>
        </div>
    </div>

    <script src="~/js/jquery-3.6.0.min.js"></script>

    <script type="text/javascript">
        function statechange() {
            var stid = $('#state').val();

            if (stid.trim() !== '') {
                var ddlcity = $('#city');
                ddlcity.empty();

                $.ajax({
                    url: "/Retailor/GetCitiesByStateId",
                    type: 'GET',
                    dataType: 'json',
                    data: { stateId: stid },
                    success: function (cities) {
                        console.log('Cities:', cities);
                        ddlcity.append($("<option></option>").val('').html('--Select City--'));
                        $.each(cities, function (i, city) {
                            ddlcity.append($("<option></option>").val(city.id).html(city.cityName));
                        });
                    },
                    error: function () {
                        alert('Error fetching cities!');
                    }
                });
            }
        }

        function citychange() {
            var cityid = $('#city').val();
            if (cityid.trim() !== '') {
                var ddlarea = $('#area');
                ddlarea.empty();

                $.ajax({
                    url: "/Retailor/GetAreasByCityId",
                    type: 'GET',
                    dataType: 'json',
                    data: { cityId: cityid },
                    success: function (d) {
                        
                        ddlarea.append($("<option></option>").val('').html('--Select Area--'));
                        $.each(d.items, function (i, area) {
                            ddlarea.append($("<option>"+area.areaName</option>").val(area.id).html(area.areaName));
                        });
                    },
                    error: function () {
                        alert('Error fetching areas!');
                    }
                });
            }
        }

    </script>
    <script>
        // Function to handle file input change event
        function handleFileInputChange(event) {
            const file = event.target.files[0];
            if (file) {
                // Assuming you have an img element with id "presignedurl"
                const imgElement = document.getElementById('presignedurl');
                imgElement.src = URL.createObjectURL(file);
            }
        }

        // Add event listener to the file input element
        const fileInput = document.getElementById('profileImageInput');
        fileInput.addEventListener('change', handleFileInputChange);
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#MobileNumber').on('input', function (e) {
                var inputValue = $(this).val();
                // Allow only numbers
                var numericValue = inputValue.replace(/\D/g, '');
                // Ensure the length is not more than 10 characters
                numericValue = numericValue.substring(0, 10);
                // Remove leading zeros
                numericValue = numericValue.replace(/^0+/, '');
                // Update the input value
                $(this).val(numericValue);
            });
        });
    </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
</body>
</html>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
           
    }
}
